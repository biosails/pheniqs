{
    "implementation": {
        "configuration api": {
            "interface": {
                "argument": [
                    "version",
                    "verbosity"
                ],
                "instruction": {
                    "description": "Lior Galanti lior.galanti@nyu.edu NYU Center for Genomics & Systems Biology"
                },
                "prototype": {
                    "path": {
                        "flag": [
                            "path"
                        ],
                        "parameter": {
                            "help": "path",
                            "metavar": "PATH"
                        }
                    }
                },
                "section": {
                    "action": [
                        {
                            "argument": [
                                "path"
                            ],
                            "implementation": "zsh_completion",
                            "instruction": {
                                "help": "generate zsh completion script",
                                "name": "zsh"
                            }
                        },
                        {
                            "argument": [
                                "path"
                            ],
                            "implementation": "serialize_header",
                            "instruction": {
                                "help": "generate a serialized configuration.h file",
                                "name": "header"
                            }
                        }
                    ],
                    "instruction": {
                        "description": "",
                        "dest": "action",
                        "help": null,
                        "metavar": "ACTION",
                        "title": "pipeline operations"
                    }
                }
            }
        },
        "illumina api": {
            "interface": {
                "argument": [
                    "version",
                    "verbosity"
                ],
                "instruction": {
                    "description": "Lior Galanti lior.galanti@nyu.edu NYU Center for Genomics & Systems Biology"
                },
                "prototype": {},
                "section": {
                    "action": [
                        {
                            "argument": [
                                "illumina_run_directory",
                                "output_dir",
                                "fastq_compression_level",
                                "no_bgzf_compression",
                                "ignore_missing_bcls",
                                "ignore_missing_filter",
                                "ignore_missing_positions"
                            ],
                            "implementation": "basecall",
                            "instruction": {
                                "help": "bcl2fastq command to write all segments to FASTQ",
                                "name": "basecall"
                            },
                            "prototype": {
                                "fastq_compression_level": {
                                    "flag": [
                                        "--fastq-compression-level"
                                    ],
                                    "parameter": {
                                        "default": 3,
                                        "help": "Forwarded to bcl2fastq.",
                                        "metavar": "INT",
                                        "type": "int"
                                    }
                                },
                                "ignore_missing_bcls": {
                                    "flag": [
                                        "--ignore-missing-bcls"
                                    ],
                                    "parameter": {
                                        "action": "store_true",
                                        "help": "Forwarded to bcl2fastq."
                                    }
                                },
                                "ignore_missing_filter": {
                                    "flag": [
                                        "--ignore-missing-filter"
                                    ],
                                    "parameter": {
                                        "action": "store_true",
                                        "help": "Forwarded to bcl2fastq."
                                    }
                                },
                                "ignore_missing_positions": {
                                    "flag": [
                                        "--ignore-missing-positions"
                                    ],
                                    "parameter": {
                                        "action": "store_true",
                                        "help": "Forwarded to bcl2fastq."
                                    }
                                },
                                "no_bgzf_compression": {
                                    "flag": [
                                        "--no-bgzf-compression"
                                    ],
                                    "parameter": {
                                        "action": "store_true",
                                        "help": "Forwarded to bcl2fastq."
                                    }
                                },
                                "output_dir": {
                                    "flag": [
                                        "--output-dir"
                                    ],
                                    "parameter": {
                                        "help": "Forwarded to bcl2fastq.",
                                        "metavar": "PATH"
                                    }
                                }
                            }
                        },
                        {
                            "argument": [
                                "illumina_run_directory",
                                "base_input",
                                "base_output",
                                "no_input_npf",
                                "no_output_npf"
                            ],
                            "instruction": {
                                "help": "Core instruction. Imported by the rest.",
                                "name": "core"
                            },
                            "prototype": {}
                        },
                        {
                            "argument": [
                                "illumina_run_directory",
                                "confidence",
                                "noise"
                            ],
                            "instruction": {
                                "help": "Sample barcode decoding job for each lane",
                                "name": "sample"
                            }
                        },
                        {
                            "argument": [
                                "illumina_run_directory",
                                "confidence",
                                "noise"
                            ],
                            "instruction": {
                                "help": "Prior estimate job file for each lane",
                                "name": "estimate"
                            }
                        },
                        {
                            "argument": [
                                "illumina_run_directory"
                            ],
                            "instruction": {
                                "help": "Interleaved job file for each lane",
                                "name": "interleave"
                            }
                        }
                    ],
                    "instruction": {
                        "description": "Generate pheniqs configuration files or a bcl2fastq command from an illumina run directory. This tool parses RunInfo.xml, RunParameters.xml and SampleSheet.csv files.",
                        "dest": "action",
                        "help": null,
                        "metavar": "ACTION",
                        "title": "pipeline operations"
                    }
                }
            },
            "namespace": {
                "sample sheet": {
                    "Data": {
                        "column": {
                            "Description": {},
                            "I5_index_ID": {},
                            "I7_Index_ID": {},
                            "Lane": {},
                            "Sample_ID": {},
                            "Sample_Name": {},
                            "Sample_Plate": {},
                            "Sample_Project": {},
                            "Sample_Well": {},
                            "index": {},
                            "index2": {}
                        }
                    },
                    "Header": {
                        "Date": {}
                    },
                    "Reads": {},
                    "Settings": {}
                }
            },
            "preset": {
                "default": {
                    "sample sheet record": {
                        "key": [
                            "@{Sample_ID}",
                            "{flowcell id}:{lane number}:{concatenated barcode}",
                            "{flowcell id}:{concatenated barcode}"
                        ],
                        "value": {
                            "DS": "{Description}",
                            "LB": [
                                "{Sample_Name}",
                                "{Sample_ID}"
                            ],
                            "SM": "{Sample_Project}"
                        }
                    }
                }
            }
        },
        "io api": {
            "interface": {
                "argument": [
                    "configuration",
                    "format",
                    "compression",
                    "compression_level",
                    "split_library",
                    "split_segment",
                    "input",
                    "base_input",
                    "base_output",
                    "sense_input",
                    "static",
                    "prefix",
                    "version",
                    "verbosity"
                ],
                "instruction": {
                    "description": "Lior Galanti lior.galanti@nyu.edu NYU Center for Genomics & Systems Biology"
                },
                "prototype": {
                    "compression": {
                        "flag": [
                            "--compression"
                        ],
                        "parameter": {
                            "choices": [
                                "uncompressed",
                                "gz",
                                "bgzf"
                            ],
                            "dest": "compression",
                            "help": "Output compression"
                        }
                    },
                    "compression_level": {
                        "flag": [
                            "--compression-level"
                        ],
                        "parameter": {
                            "choices": [
                                "0",
                                "1",
                                "2",
                                "3",
                                "4",
                                "5",
                                "6",
                                "7",
                                "8",
                                "9"
                            ],
                            "dest": "compression_level",
                            "help": "Output compression level"
                        }
                    },
                    "configuration": {
                        "flag": [
                            "-c",
                            "--configuration"
                        ],
                        "parameter": {
                            "help": "Path to original pheniqs configuration file.",
                            "metavar": "PATH",
                            "required": true
                        }
                    },
                    "format": {
                        "flag": [
                            "-F",
                            "--format"
                        ],
                        "parameter": {
                            "choices": [
                                "fastq",
                                "sam",
                                "bam",
                                "cram"
                            ],
                            "default": "bam",
                            "dest": "format",
                            "help": "Output format"
                        }
                    },
                    "input": {
                        "flag": [
                            "-i",
                            "--input"
                        ],
                        "parameter": {
                            "action": "append",
                            "help": "Forwarded to pheniqs -i/--input parameter.",
                            "metavar": "PATH"
                        }
                    },
                    "prefix": {
                        "flag": [
                            "-p",
                            "--prefix"
                        ],
                        "parameter": {
                            "help": "Prefix for generated output file names"
                        }
                    },
                    "sense_input": {
                        "flag": [
                            "-s",
                            "--sense-input"
                        ],
                        "parameter": {
                            "action": "store_true",
                            "default": false,
                            "dest": "sense_input",
                            "help": "sense input directive for pheniqs"
                        }
                    },
                    "split_library": {
                        "flag": [
                            "-L",
                            "--split-library"
                        ],
                        "parameter": {
                            "action": "store_true",
                            "dest": "split_library",
                            "help": "Library output routing"
                        }
                    },
                    "split_segment": {
                        "flag": [
                            "-S",
                            "--split-segment"
                        ],
                        "parameter": {
                            "action": "store_true",
                            "dest": "split_segment",
                            "help": "Segment output routing"
                        }
                    },
                    "static": {
                        "flag": [
                            "--static"
                        ],
                        "parameter": {
                            "action": "store_true",
                            "dest": "static",
                            "help": "Static configuration output"
                        }
                    }
                }
            }
        },
        "package": {
            "interface": {
                "argument": [
                    "version",
                    "verbosity"
                ],
                "instruction": {
                    "description": "Lior Galanti lior.galanti@nyu.edu NYU Center for Genomics & Systems Biology"
                },
                "prototype": {
                    "filter": {
                        "flag": [
                            "-f",
                            "--filter"
                        ],
                        "parameter": {
                            "help": "list of packages",
                            "metavar": "PACKAGE",
                            "nargs": "*"
                        }
                    },
                    "force": {
                        "flag": [
                            "-F",
                            "--force"
                        ],
                        "parameter": {
                            "help": "list of packages to force",
                            "metavar": "PACKAGE",
                            "nargs": "*"
                        }
                    },
                    "path": {
                        "flag": [
                            "path"
                        ],
                        "parameter": {
                            "help": "path",
                            "metavar": "PATH"
                        }
                    }
                },
                "section": {
                    "action": [
                        {
                            "argument": [
                                "filter",
                                "path"
                            ],
                            "implementation": "clean",
                            "instruction": {
                                "help": "clean build root environment",
                                "name": "clean"
                            }
                        },
                        {
                            "argument": [
                                "filter",
                                "path"
                            ],
                            "implementation": "build",
                            "instruction": {
                                "help": "build build root environment",
                                "name": "build"
                            }
                        },
                        {
                            "argument": [
                                "filter",
                                "path"
                            ],
                            "implementation": "clean.package",
                            "instruction": {
                                "help": "delete exploded package",
                                "name": "clean.package"
                            }
                        }
                    ],
                    "instruction": {
                        "description": "",
                        "dest": "action",
                        "help": null,
                        "metavar": "ACTION",
                        "title": "pipeline operations"
                    }
                }
            },
            "package implementation": {
                "bcl2fastq": {
                    "job implementation": "pheniqs-build-api.Bcl2Fastq"
                },
                "bz2": {
                    "job implementation": "pheniqs-build-api.BZip2"
                },
                "htslib": {
                    "job implementation": "pheniqs-build-api.Make"
                },
                "libdeflate": {
                    "job implementation": "pheniqs-build-api.LibDeflate"
                },
                "pheniqs": {
                    "job implementation": "pheniqs-build-api.Make"
                },
                "rapidjson": {
                    "job implementation": "pheniqs-build-api.RapidJSON"
                },
                "samtools": {
                    "job implementation": "pheniqs-build-api.SAMTools"
                },
                "xz": {
                    "job implementation": "pheniqs-build-api.Make"
                },
                "zlib": {
                    "job implementation": "pheniqs-build-api.Make"
                }
            }
        },
        "prior api": {
            "interface": {
                "argument": [
                    "configuration",
                    "report",
                    "prefix",
                    "input",
                    "sense_input",
                    "base_input",
                    "base_output",
                    "version",
                    "verbosity"
                ],
                "instruction": {
                    "description": "Lior Galanti lior.galanti@nyu.edu NYU Center for Genomics & Systems Biology",
                    "epilog": "Adjust priors in a pheniqs configuration file using a statistics report from a prelimanry pheniqs run. If a report is not provided pheniqs will be executed to produce the prior and than apply it to the provided configurtion. If you choose not to provide a prior, the parameters forwarded to pheniqs allow you adjust relevent IO parameters to make the configurtion more portable."
                },
                "prototype": {
                    "configuration": {
                        "flag": [
                            "-c",
                            "--configuration"
                        ],
                        "parameter": {
                            "help": "Path to original pheniqs configuration file.",
                            "metavar": "PATH",
                            "required": true
                        }
                    },
                    "input": {
                        "flag": [
                            "-i",
                            "--input"
                        ],
                        "parameter": {
                            "action": "append",
                            "help": "Forwarded to pheniqs -i/--input parameter.",
                            "metavar": "PATH"
                        }
                    },
                    "prefix": {
                        "flag": [
                            "-p",
                            "--prefix"
                        ],
                        "parameter": {
                            "help": "Generated file names prefix."
                        }
                    },
                    "report": {
                        "flag": [
                            "-r",
                            "--report"
                        ],
                        "parameter": {
                            "help": "Path to pheniqs prior estimation report file.",
                            "metavar": "PATH"
                        }
                    },
                    "sense_input": {
                        "flag": [
                            "-s",
                            "--sense-input"
                        ],
                        "parameter": {
                            "action": "store_true",
                            "default": false,
                            "help": "Forwarded to pheniqs -s/--sense-input parameter."
                        }
                    }
                }
            }
        },
        "subsample": {
            "interface": {
                "argument": [
                    "fraction",
                    "input",
                    "output",
                    "capacity",
                    "version",
                    "verbosity"
                ],
                "instruction": {
                    "description": "Lior Galanti lior.galanti@nyu.edu NYU Center for Genomics & Systems Biology"
                },
                "prototype": {
                    "capacity": {
                        "flag": [
                            "-C",
                            "--capacity"
                        ],
                        "parameter": {
                            "default": 128,
                            "help": "IO buffer capacity",
                            "metavar": "INT",
                            "type": "int"
                        }
                    },
                    "fraction": {
                        "flag": [
                            "-f",
                            "--fraction"
                        ],
                        "parameter": {
                            "default": 0.1,
                            "help": "fraction of reads to sample",
                            "metavar": "FLOAT",
                            "type": "float"
                        }
                    },
                    "input": {
                        "flag": [
                            "-i",
                            "--input"
                        ],
                        "parameter": {
                            "help": "input SAM encoded file path",
                            "metavar": "PATH"
                        }
                    },
                    "output": {
                        "flag": [
                            "-o",
                            "--output"
                        ],
                        "parameter": {
                            "help": "output SAM encoded file path",
                            "metavar": "PATH"
                        }
                    }
                }
            }
        }
    },
    "interface": {
        "prototype": {
            "base_input": {
                "flag": [
                    "--base-input"
                ],
                "parameter": {
                    "help": "Forwarded to pheniqs -I/--base-input parameter.",
                    "metavar": "PATH"
                }
            },
            "base_output": {
                "flag": [
                    "--base-output"
                ],
                "parameter": {
                    "help": "Forwarded to pheniqs -O/--base-output parameter.",
                    "metavar": "PATH"
                }
            },
            "confidence": {
                "flag": [
                    "--confidence"
                ],
                "parameter": {
                    "default": 0.95,
                    "help": "PAMLD confidence.",
                    "metavar": "PROBABILITY",
                    "type": "float"
                }
            },
            "illumina_run_directory": {
                "flag": [
                    "illumina_run_directory"
                ],
                "parameter": {
                    "help": "Path to illumina run directory",
                    "metavar": "PATH"
                }
            },
            "no_input_npf": {
                "flag": [
                    "--no-input-npf"
                ],
                "parameter": {
                    "action": "store_true",
                    "help": "Forwarded to pheniqs --no-input-npf."
                }
            },
            "no_output_npf": {
                "flag": [
                    "--no-output-npf"
                ],
                "parameter": {
                    "action": "store_true",
                    "help": "Forwarded to pheniqs --no-output-npf."
                }
            },
            "noise": {
                "flag": [
                    "--noise"
                ],
                "parameter": {
                    "default": 0.05,
                    "help": "PAMLD noise prior.",
                    "metavar": "PROBABILITY",
                    "type": "float"
                }
            },
            "verbosity": {
                "flag": [
                    "-v",
                    "--verbosity"
                ],
                "parameter": {
                    "choices": [
                        "debug",
                        "info",
                        "warning",
                        "error",
                        "critical"
                    ],
                    "dest": "verbosity",
                    "help": "logging verbosity level",
                    "metavar": "LEVEL"
                }
            },
            "version": {
                "flag": [
                    "--version"
                ],
                "parameter": {
                    "action": "version",
                    "version": "%[prog]s 1.0"
                }
            }
        }
    }
}
