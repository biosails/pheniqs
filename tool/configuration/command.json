{
    "benchmark": {
        "interface": {
            "argument": [
                "home",
                "version",
                "verbosity"
            ],
            "instruction": {
                "description": "Lior Galanti lior.galanti@nyu.edu NYU Center for Genomics & Systems Biology"
            },
            "prototype": {
                "bsid": {
                    "flag": [
                        "--bsid"
                    ],
                    "parameter": {
                        "help": "Barcode simulation id"
                    }
                },
                "capacity": {
                    "flag": [
                        "-C",
                        "--capacity"
                    ],
                    "parameter": {
                        "default": 256,
                        "help": "IO buffer capacity.",
                        "metavar": "INT",
                        "type": "int"
                    }
                },
                "configuration": {
                    "flag": [
                        "-c",
                        "--configuration"
                    ],
                    "parameter": {
                        "help": "Path to configuration file.",
                        "metavar": "PATH"
                    }
                },
                "error": {
                    "flag": [
                        "-e",
                        "--error"
                    ],
                    "parameter": {
                        "default": null,
                        "help": "Desired error rate per nucloetide.",
                        "metavar": "FLOAT",
                        "type": "float"
                    }
                },
                "home": {
                    "flag": [
                        "-H",
                        "--home"
                    ],
                    "parameter": {
                        "help": "Path to home directory.",
                        "metavar": "PATH"
                    }
                },
                "input": {
                    "flag": [
                        "-i",
                        "--input"
                    ],
                    "parameter": {
                        "default": "/dev/stdin",
                        "help": "Path to SAM encoded input file. default: stdin.",
                        "metavar": "PATH"
                    }
                },
                "model": {
                    "flag": [
                        "-m",
                        "--model"
                    ],
                    "parameter": {
                        "help": "Path to simulation model file.",
                        "metavar": "PATH"
                    }
                },
                "output": {
                    "flag": [
                        "-o",
                        "--output"
                    ],
                    "parameter": {
                        "default": "/dev/stdout",
                        "help": "Path to SAM encoded output file. default: stdout.",
                        "metavar": "PATH"
                    }
                },
                "path": {
                    "flag": [
                        "path"
                    ],
                    "parameter": {
                        "help": "path",
                        "metavar": "PATH"
                    }
                },
                "preset": {
                    "flag": [
                        "-p",
                        "--preset"
                    ],
                    "parameter": {
                        "default": "A5KVK",
                        "help": "Simulation preset.",
                        "metavar": "NAME"
                    }
                },
                "report": {
                    "flag": [
                        "-r",
                        "--report"
                    ],
                    "parameter": {
                        "default": "/dev/stderr",
                        "help": "Path to report file.",
                        "metavar": "PATH"
                    }
                },
                "sid": {
                    "flag": [
                        "-s",
                        "--session"
                    ],
                    "parameter": {
                        "help": "Persistence session id",
                        "metavar": "ID"
                    }
                },
                "ssid": {
                    "flag": [
                        "--ssid"
                    ],
                    "parameter": {
                        "help": "Substitution simulation id"
                    }
                },
                "verbosity": {
                    "flag": [
                        "-v",
                        "--verbosity"
                    ],
                    "parameter": {
                        "choices": [
                            "debug",
                            "info",
                            "warning",
                            "error",
                            "critical"
                        ],
                        "dest": "verbosity",
                        "help": "Logging verbosity level.",
                        "metavar": "LEVEL"
                    }
                },
                "version": {
                    "flag": [
                        "--version"
                    ],
                    "parameter": {
                        "action": "version",
                        "version": "%[prog]s 1.0"
                    }
                }
            },
            "section": {
                "action": [
                    {
                        "argument": [
                            "path",
                            "preset",
                            "capacity",
                            "sid"
                        ],
                        "implementation": "plan",
                        "instruction": {
                            "description": "Execute simmulation plan.",
                            "help": "Execute simmulation plan.",
                            "name": "plan"
                        },
                        "prototype": {
                            "path": {
                                "parameter": {
                                    "help": "path to simlation plan JSON file"
                                }
                            }
                        }
                    },
                    {
                        "argument": [
                            "bsid"
                        ],
                        "implementation": "rebuild",
                        "instruction": {
                            "description": "rebuild db.",
                            "help": "Rebuild db.",
                            "name": "rebuild"
                        }
                    },
                    {
                        "argument": [
                            "bsid",
                            "ssid",
                            "error",
                            "capacity",
                            "sid"
                        ],
                        "implementation": "benchmark_substitution",
                        "instruction": {
                            "description": "Simulate barcode errors based on the quality scores and benchmark against resulting file.",
                            "help": "Benchmakr simulate barcode errors.",
                            "name": "benchmark_substitution"
                        }
                    },
                    {
                        "argument": [
                            "bsid",
                            "preset",
                            "refresh",
                            "sid"
                        ],
                        "implementation": "summarize",
                        "instruction": {
                            "description": "Summarize benchmark results.",
                            "help": "Summarize benchmark results.",
                            "name": "summarize"
                        },
                        "prototype": {
                            "bsid": {
                                "flag": [
                                    "--bsid"
                                ],
                                "parameter": {
                                    "help": "Barcode simulation id",
                                    "required": true
                                }
                            },
                            "preset": {
                                "flag": [
                                    "-p",
                                    "--preset"
                                ],
                                "parameter": {
                                    "choices": [
                                        "json",
                                        "bin_model",
                                        "decoder_summary_R",
                                        "decoder_summary",
                                        "barcode_summary_R",
                                        "barcode_summary",
                                        "barcode_prior",
                                        "noise_summary_R",
                                        "noise_summary",
                                        "classified_summary_R",
                                        "classified_summary",
                                        "binned_decoder_summary_R",
                                        "binned_decoder_summary",
                                        "quality_distribution",
                                        "barcode_distribution"
                                    ],
                                    "default": "json",
                                    "help": "Summary preset.",
                                    "metavar": "NAME"
                                }
                            },
                            "refresh": {
                                "flag": [
                                    "-R",
                                    "--refresh"
                                ],
                                "parameter": {
                                    "action": "store_true",
                                    "help": "Refresh summary model"
                                }
                            }
                        }
                    },
                    {
                        "argument": [
                            "bsid",
                            "preset",
                            "input",
                            "capacity",
                            "sid"
                        ],
                        "implementation": "simulate_barcode",
                        "instruction": {
                            "description": "Simulate barcode indices using the priors with perfect barcodes, keeping the existing quality scores. Global error rate on the cycles containing the barcode indice is reported to allow calibrtation when simulating errors. The correct barcode index is encoded in the read id.",
                            "help": "Simulate perfect barcode indices.",
                            "name": "simulate_barcode"
                        },
                        "prototype": {
                            "input": {
                                "parameter": {
                                    "help": "Original input data to simulate barcode indices."
                                }
                            }
                        }
                    },
                    {
                        "argument": [
                            "bsid",
                            "ssid",
                            "error",
                            "capacity",
                            "sid"
                        ],
                        "implementation": "simulate_substitution",
                        "instruction": {
                            "description": "Simulate barcode errors based on the quality scores. If -e/--error is specified quality scores are first recalibrated to produce the requested global rate.",
                            "help": "Simulate barcode errors.",
                            "name": "simulate_substitution"
                        }
                    },
                    {
                        "argument": [
                            "bsid",
                            "ssid",
                            "capacity",
                            "sid"
                        ],
                        "implementation": "todeml",
                        "instruction": {
                            "description": "Transcoded reads to a deML consumable format.",
                            "help": "Transcoded to deML syntax",
                            "name": "todeml"
                        }
                    },
                    {
                        "argument": [
                            "bsid",
                            "ssid",
                            "sid"
                        ],
                        "implementation": "sense_prior",
                        "instruction": {
                            "description": "Exectue pheniqs with a flat configuration and no output to estimste priors.",
                            "help": "Estimate distrbution prior from data.",
                            "name": "sense_prior"
                        }
                    },
                    {
                        "argument": [
                            "bsid",
                            "ssid",
                            "sid"
                        ],
                        "implementation": "adjust_prior",
                        "instruction": {
                            "description": "Create a new pheniqs mux configuration file with adjusted priors based on the initial report.",
                            "help": "Adjuste configuration priors",
                            "name": "adjust_prior"
                        }
                    },
                    {
                        "argument": [
                            "bsid",
                            "ssid",
                            "sid"
                        ],
                        "implementation": "demux_pamld",
                        "instruction": {
                            "help": "Demultiplex with pamld.",
                            "name": "demux_pamld"
                        }
                    },
                    {
                        "argument": [
                            "bsid",
                            "ssid",
                            "sid"
                        ],
                        "implementation": "demux_mdd",
                        "instruction": {
                            "help": "Demultiplex with mdd.",
                            "name": "demux_mdd"
                        }
                    },
                    {
                        "argument": [
                            "bsid",
                            "ssid",
                            "sid"
                        ],
                        "implementation": "demux_deml",
                        "instruction": {
                            "help": "Demultiplex with deML.",
                            "name": "demux_deml"
                        }
                    },
                    {
                        "argument": [
                            "bsid",
                            "ssid",
                            "capacity",
                            "sid"
                        ],
                        "implementation": "analyze_pamld",
                        "instruction": {
                            "description": "Collect FP/FN/TP/TN statistics from pamld demultiplexing.",
                            "help": "Analyze pamld demultiplexing results.",
                            "name": "analyze_pamld"
                        }
                    },
                    {
                        "argument": [
                            "bsid",
                            "ssid",
                            "capacity",
                            "sid"
                        ],
                        "implementation": "analyze_deml",
                        "instruction": {
                            "description": "Collect FP/FN/TP/TN statistics from deML demultiplexing.",
                            "help": "Analyze deML demultiplexing results.",
                            "name": "analyze_deml"
                        }
                    }
                ],
                "instruction": {
                    "description": "",
                    "dest": "action",
                    "help": null,
                    "metavar": "ACTION",
                    "title": "pipeline operations"
                }
            }
        }
    },
    "estimate prior": {
        "interface": {
            "argument": [
                "configuration",
                "report",
                "input",
                "base-input",
                "base-output",
                "sense-input",
                "split-fastq",
                "split-bam",
                "prefix",
                "version",
                "verbosity"
            ],
            "instruction": {
                "description": "Lior Galanti lior.galanti@nyu.edu NYU Center for Genomics & Systems Biology"
            },
            "prototype": {
                "base-input": {
                    "flag": [
                        "-I",
                        "--base-input"
                    ],
                    "parameter": {
                        "help": "Base input URL directive for pheniqs",
                        "metavar": "PATH"
                    }
                },
                "base-output": {
                    "flag": [
                        "-O",
                        "--base-output"
                    ],
                    "parameter": {
                        "help": "Base output URL directive for pheniqs",
                        "metavar": "PATH"
                    }
                },
                "configuration": {
                    "flag": [
                        "-c",
                        "--configuration"
                    ],
                    "parameter": {
                        "help": "Path to original configuration file.",
                        "metavar": "PATH",
                        "required": true
                    }
                },
                "input": {
                    "flag": [
                        "-i",
                        "--input"
                    ],
                    "parameter": {
                        "help": "Input directive for pheniqs",
                        "metavar": "PATH",
                        "nargs": "*"
                    }
                },
                "prefix": {
                    "flag": [
                        "-p",
                        "--prefix"
                    ],
                    "parameter": {
                        "default": "library",
                        "help": "Prefix for generated output file names"
                    }
                },
                "report": {
                    "flag": [
                        "-r",
                        "--report"
                    ],
                    "parameter": {
                        "help": "Path to report file.",
                        "metavar": "PATH"
                    }
                },
                "sense-input": {
                    "flag": [
                        "-s",
                        "--sense-input"
                    ],
                    "parameter": {
                        "action": "store_true",
                        "default": false,
                        "help": "sense input directive for pheniqs"
                    }
                },
                "split-bam": {
                    "flag": [
                        "--split-bam"
                    ],
                    "parameter": {
                        "action": "store_true",
                        "default": false,
                        "help": "adjust output configuration to write the reads from each sample to a separate bam file"
                    }
                },
                "split-fastq": {
                    "flag": [
                        "--split-fastq"
                    ],
                    "parameter": {
                        "action": "store_true",
                        "default": false,
                        "help": "adjust output configuration to write each segment of each classified read to a separate fastq file"
                    }
                },
                "verbosity": {
                    "flag": [
                        "-v",
                        "--verbosity"
                    ],
                    "parameter": {
                        "choices": [
                            "debug",
                            "info",
                            "warning",
                            "error",
                            "critical"
                        ],
                        "dest": "verbosity",
                        "help": "Logging verbosity level.",
                        "metavar": "LEVEL"
                    }
                },
                "version": {
                    "flag": [
                        "--version"
                    ],
                    "parameter": {
                        "action": "version",
                        "version": "%[prog]s 1.0"
                    }
                }
            }
        }
    },
    "split output": {
        "interface": {
            "argument": [
                "configuration",
                "prefix",
                "format",
                "compression",
                "compression_level",
                "split_library",
                "split_segment",
                "sense_input",
                "base_input",
                "base_output",
                "static",
                "version",
                "verbosity"
            ],
            "instruction": {
                "description": "Lior Galanti lior.galanti@nyu.edu NYU Center for Genomics & Systems Biology"
            },
            "prototype": {
                "static": {
                    "flag": [
                        "--static"
                    ],
                    "parameter": {
                        "action": "store_true",
                        "dest": "static",
                        "help": "Static configuratio output"
                    }
                },
                "split_library": {
                    "flag": [
                        "-l",
                        "--split-library"
                    ],
                    "parameter": {
                        "action": "store_true",
                        "dest": "split_library",
                        "help": "Library output routing"
                    }
                },
                "split_segment": {
                    "flag": [
                        "-s",
                        "--split-segment"
                    ],
                    "parameter": {
                        "action": "store_true",
                        "dest": "split_segment",
                        "help": "Segment output routing"
                    }
                },
                "format": {
                    "flag": [
                        "-f",
                        "--format"
                    ],
                    "parameter": {
                        "default": "bam",
                        "choices": [
                            "fastq",
                            "sam",
                            "bam",
                            "cram"
                        ],
                        "dest": "format",
                        "help": "Output format"
                    }
                },
                "compression": {
                    "flag": [
                        "--compression"
                    ],
                    "parameter": {
                        "choices": [
                            "uncompressed",
                            "gz",
                            "bgzf"
                        ],
                        "dest": "compression",
                        "help": "Output compression"
                    }
                },
                "compression_level": {
                    "flag": [
                        "--compression-level"
                    ],
                    "parameter": {
                        "choices": [
                            "0",
                            "1",
                            "2",
                            "3",
                            "4",
                            "5",
                            "6",
                            "7",
                            "8",
                            "9"
                        ],
                        "dest": "compression_level",
                        "help": "Output compression level"
                    }
                },
                "base_input": {
                    "flag": [
                        "-I",
                        "--base-input"
                    ],
                    "parameter": {
                        "help": "Base input URL directive for pheniqs",
                        "metavar": "PATH"
                    }
                },
                "base_output": {
                    "flag": [
                        "-O",
                        "--base-output"
                    ],
                    "parameter": {
                        "help": "Base output URL directive for pheniqs",
                        "metavar": "PATH"
                    }
                },
                "configuration": {
                    "flag": [
                        "-c",
                        "--configuration"
                    ],
                    "parameter": {
                        "help": "Path to original configuration file.",
                        "metavar": "PATH",
                        "required": true
                    }
                },
                "input": {
                    "flag": [
                        "-i",
                        "--input"
                    ],
                    "parameter": {
                        "help": "Input directive for pheniqs",
                        "metavar": "PATH",
                        "nargs": "*"
                    }
                },
                "prefix": {
                    "flag": [
                        "-p",
                        "--prefix"
                    ],
                    "parameter": {
                        "help": "Prefix for generated output file names"
                    }
                },
                "sense_input": {
                    "flag": [
                        "-S",
                        "--sense-input"
                    ],
                    "parameter": {
                        "dest": "sense_input",
                        "action": "store_true",
                        "default": false,
                        "help": "sense input directive for pheniqs"
                    }
                },
                "confidence": {
                    "flag": [
                        "--confidence"
                    ],
                    "parameter": {
                        "default": 0.95,
                        "help": "pheniqs: confidence threshold",
                        "metavar": "PROBABILITY",
                        "type": "float"
                    }
                },
                "noise": {
                    "flag": [
                        "--noise"
                    ],
                    "parameter": {
                        "default": 0.05,
                        "help": "pheniqs: noise prior",
                        "metavar": "PROBABILITY",
                        "type": "float"
                    }
                },
                "verbosity": {
                    "flag": [
                        "-v",
                        "--verbosity"
                    ],
                    "parameter": {
                        "choices": [
                            "debug",
                            "info",
                            "warning",
                            "error",
                            "critical"
                        ],
                        "dest": "verbosity",
                        "help": "logging verbosity level",
                        "metavar": "LEVEL"
                    }
                },
                "version": {
                    "flag": [
                        "--version"
                    ],
                    "parameter": {
                        "action": "version",
                        "version": "%[prog]s 1.0"
                    }
                }
            }
        }
    },
    "illumina api": {
        "interface": {
            "argument": [
                "version",
                "verbosity"
            ],
            "instruction": {
                "description": "Lior Galanti lior.galanti@nyu.edu NYU Center for Genomics & Systems Biology"
            },
            "prototype": {
                "confidence": {
                    "flag": [
                        "--confidence"
                    ],
                    "parameter": {
                        "default": 0.95,
                        "help": "pheniqs: confidence threshold",
                        "metavar": "PROBABILITY",
                        "type": "float"
                    }
                },
                "illumina_run_directory": {
                    "flag": [
                        "illumina_run_directory"
                    ],
                    "parameter": {
                        "help": "illumina_run_directory",
                        "metavar": "PATH"
                    }
                },
                "noise": {
                    "flag": [
                        "--noise"
                    ],
                    "parameter": {
                        "default": 0.05,
                        "help": "pheniqs: noise prior",
                        "metavar": "PROBABILITY",
                        "type": "float"
                    }
                },
                "verbosity": {
                    "flag": [
                        "-v",
                        "--verbosity"
                    ],
                    "parameter": {
                        "choices": [
                            "debug",
                            "info",
                            "warning",
                            "error",
                            "critical"
                        ],
                        "dest": "verbosity",
                        "help": "logging verbosity level",
                        "metavar": "LEVEL"
                    }
                },
                "version": {
                    "flag": [
                        "--version"
                    ],
                    "parameter": {
                        "action": "version",
                        "version": "%[prog]s 1.0"
                    }
                }
            },
            "section": {
                "action": [
                    {
                        "argument": [
                            "illumina_run_directory",
                            "output_dir",
                            "no_bgzf_compression",
                            "fastq_compression_level",
                            "ignore_missing_bcls",
                            "ignore_missing_filter",
                            "ignore_missing_positions"
                        ],
                        "implementation": "basecall",
                        "instruction": {
                            "help": "bcl2fastq command to write all segments to FASTQ",
                            "name": "basecall"
                        },
                        "prototype": {
                            "fastq_compression_level": {
                                "flag": [
                                    "--fastq-compression-level"
                                ],
                                "parameter": {
                                    "default": 3,
                                    "help": "bcl2fastq: zlib compression level (1-9) used for FASTQ files",
                                    "metavar": "INT",
                                    "type": "int"
                                }
                            },
                            "ignore_missing_bcls": {
                                "flag": [
                                    "--ignore-missing-bcls"
                                ],
                                "parameter": {
                                    "action": "store_true",
                                    "help": "bcl2fastq: assume 'N'/'#' for missing calls"
                                }
                            },
                            "ignore_missing_filter": {
                                "flag": [
                                    "--ignore-missing-filter"
                                ],
                                "parameter": {
                                    "action": "store_true",
                                    "help": "bcl2fastq: assume 'true' for missing filters"
                                }
                            },
                            "ignore_missing_positions": {
                                "flag": [
                                    "--ignore-missing-positions"
                                ],
                                "parameter": {
                                    "action": "store_true",
                                    "help": "bcl2fastq: assume [0,i] for missing positions, where i is incremented starting from 0"
                                }
                            },
                            "no_bgzf_compression": {
                                "flag": [
                                    "--no-bgzf-compression"
                                ],
                                "parameter": {
                                    "action": "store_true",
                                    "help": "bcl2fastq: turn off BGZF compression for FASTQ files"
                                }
                            },
                            "output_dir": {
                                "flag": [
                                    "--output-dir"
                                ],
                                "parameter": {
                                    "help": "bcl2fastq: path to output directory",
                                    "metavar": "PATH"
                                }
                            }
                        }
                    },
                    {
                        "argument": [
                            "illumina_run_directory",
                            "base_input_url",
                            "base_output_url",
                            "no_input_npf",
                            "no_output_npf"
                        ],
                        "instruction": {
                            "help": "Core instruction. Imported by the rest.",
                            "name": "core"
                        },
                        "prototype": {
                            "base_input_url": {
                                "flag": [
                                    "--base-input-url"
                                ],
                                "parameter": {
                                    "help": "pheniqs: base input url",
                                    "metavar": "PATH"
                                }
                            },
                            "base_output_url": {
                                "flag": [
                                    "--base-output-url"
                                ],
                                "parameter": {
                                    "help": "pheniqs: base output url",
                                    "metavar": "PATH"
                                }
                            },
                            "no_input_npf": {
                                "flag": [
                                    "--no-input-npf"
                                ],
                                "parameter": {
                                    "action": "store_true",
                                    "help": "pheniqs: Filter incoming QC failed reads."
                                }
                            },
                            "no_output_npf": {
                                "flag": [
                                    "--no-output-npf"
                                ],
                                "parameter": {
                                    "action": "store_true",
                                    "help": "pheniqs: Filter outgoing QC failed reads."
                                }
                            }
                        }
                    },
                    {
                        "argument": [
                            "illumina_run_directory",
                            "confidence",
                            "noise"
                        ],
                        "instruction": {
                            "help": "Multiplex job file for each lane",
                            "name": "multiplex"
                        }
                    },
                    {
                        "argument": [
                            "illumina_run_directory",
                            "confidence",
                            "noise"
                        ],
                        "instruction": {
                            "help": "Prior estimate job file for each lane",
                            "name": "estimate"
                        }
                    },
                    {
                        "argument": [
                            "illumina_run_directory"
                        ],
                        "instruction": {
                            "help": "Interleaved job file for each lane",
                            "name": "interleave"
                        }
                    }
                ],
                "instruction": {
                    "description": "Generate pheniqs configuration files or a bcl2fastq command from an illumina run directory. This tool parses that RunInfo.xml, RunParameters.xml and SampleSheet.csv files in the directory.",
                    "dest": "action",
                    "help": null,
                    "metavar": "ACTION",
                    "title": "pipeline operations"
                }
            }
        },
        "namespace": {
            "sample sheet": {
                "Data": {
                    "column": {
                        "Description": {},
                        "I5_index_ID": {},
                        "I7_Index_ID": {},
                        "Lane": {},
                        "Sample_ID": {},
                        "Sample_Name": {},
                        "Sample_Plate": {},
                        "Sample_Project": {},
                        "Sample_Well": {},
                        "index": {},
                        "index2": {}
                    }
                },
                "Header": {
                    "Date": {}
                },
                "Reads": {},
                "Settings": {}
            }
        },
        "preset": {
            "default": {
                "sample sheet record": {
                    "key": [
                        "@{Sample_ID}",
                        "{flowcell id}:{lane number}:{concatenated barcode}",
                        "{flowcell id}:{concatenated barcode}"
                    ],
                    "value": {
                        "DS": "{Description}",
                        "LB": [
                            "{Sample_Name}",
                            "{Sample_ID}"
                        ],
                        "SM": "{Sample_Project}"
                    }
                }
            }
        }
    },
    "package": {
        "interface": {
            "argument": [
                "version",
                "verbosity"
            ],
            "instruction": {
                "description": "Lior Galanti lior.galanti@nyu.edu NYU Center for Genomics & Systems Biology"
            },
            "prototype": {
                "filter": {
                    "flag": [
                        "-f",
                        "--filter"
                    ],
                    "parameter": {
                        "help": "list of packages",
                        "metavar": "PACKAGE",
                        "nargs": "*"
                    }
                },
                "force": {
                    "flag": [
                        "-F",
                        "--force"
                    ],
                    "parameter": {
                        "help": "list of packages to force",
                        "metavar": "PACKAGE",
                        "nargs": "*"
                    }
                },
                "path": {
                    "flag": [
                        "path"
                    ],
                    "parameter": {
                        "help": "path",
                        "metavar": "PATH"
                    }
                },
                "verbosity": {
                    "flag": [
                        "-v",
                        "--verbosity"
                    ],
                    "parameter": {
                        "choices": [
                            "debug",
                            "info",
                            "warning",
                            "error",
                            "critical"
                        ],
                        "dest": "verbosity",
                        "help": "logging verbosity level",
                        "metavar": "LEVEL"
                    }
                },
                "version": {
                    "flag": [
                        "--version"
                    ],
                    "parameter": {
                        "action": "version",
                        "version": "%[prog]s 1.0"
                    }
                }
            },
            "section": {
                "action": [
                    {
                        "argument": [
                            "filter",
                            "path"
                        ],
                        "implementation": "clean",
                        "instruction": {
                            "help": "clean build root environment",
                            "name": "clean"
                        }
                    },
                    {
                        "argument": [
                            "filter",
                            "path"
                        ],
                        "implementation": "build",
                        "instruction": {
                            "help": "build build root environment",
                            "name": "build"
                        }
                    },
                    {
                        "argument": [
                            "filter",
                            "path"
                        ],
                        "implementation": "clean.package",
                        "instruction": {
                            "help": "delete exploded package",
                            "name": "clean.package"
                        }
                    }
                ],
                "instruction": {
                    "description": "",
                    "dest": "action",
                    "help": null,
                    "metavar": "ACTION",
                    "title": "pipeline operations"
                }
            }
        },
        "package implementation": {
            "bcl2fastq": {
                "job implementation": "ppkg.Bcl2Fastq"
            },
            "bz2": {
                "job implementation": "ppkg.BZip2"
            },
            "htslib": {
                "job implementation": "ppkg.Make"
            },
            "libdeflate": {
                "job implementation": "ppkg.LibDeflate"
            },
            "pheniqs": {
                "job implementation": "ppkg.Make"
            },
            "rapidjson": {
                "job implementation": "ppkg.RapidJSON"
            },
            "samtools": {
                "job implementation": "ppkg.SAMTools"
            },
            "xz": {
                "job implementation": "ppkg.Make"
            },
            "zlib": {
                "job implementation": "ppkg.Make"
            }
        }
    },
    "shell": {
        "interface": {
            "argument": [
                "version",
                "verbosity"
            ],
            "instruction": {
                "description": "Lior Galanti lior.galanti@nyu.edu NYU Center for Genomics & Systems Biology"
            },
            "prototype": {
                "path": {
                    "flag": [
                        "path"
                    ],
                    "parameter": {
                        "help": "path",
                        "metavar": "PATH"
                    }
                },
                "verbosity": {
                    "flag": [
                        "-v",
                        "--verbosity"
                    ],
                    "parameter": {
                        "choices": [
                            "debug",
                            "info",
                            "warning",
                            "error",
                            "critical"
                        ],
                        "dest": "verbosity",
                        "help": "logging verbosity level",
                        "metavar": "LEVEL"
                    }
                },
                "version": {
                    "flag": [
                        "--version"
                    ],
                    "parameter": {
                        "action": "version",
                        "version": "%[prog]s 1.0"
                    }
                }
            },
            "section": {
                "action": [
                    {
                        "argument": [
                            "path"
                        ],
                        "implementation": "zsh_completion",
                        "instruction": {
                            "help": "generate zsh completion script",
                            "name": "zsh"
                        }
                    }
                ],
                "instruction": {
                    "description": "",
                    "dest": "action",
                    "help": null,
                    "metavar": "ACTION",
                    "title": "pipeline operations"
                }
            }
        }
    },
    "subsample": {
        "interface": {
            "argument": [
                "fraction",
                "input",
                "output",
                "capacity",
                "version",
                "verbosity"
            ],
            "instruction": {
                "description": "Lior Galanti lior.galanti@nyu.edu NYU Center for Genomics & Systems Biology"
            },
            "prototype": {
                "capacity": {
                    "flag": [
                        "-C",
                        "--capacity"
                    ],
                    "parameter": {
                        "default": 128,
                        "help": "IO buffer capacity",
                        "metavar": "INT",
                        "type": "int"
                    }
                },
                "fraction": {
                    "flag": [
                        "-f",
                        "--fraction"
                    ],
                    "parameter": {
                        "default": 0.1,
                        "help": "fraction of reads to sample",
                        "metavar": "FLOAT",
                        "type": "float"
                    }
                },
                "input": {
                    "flag": [
                        "-i",
                        "--input"
                    ],
                    "parameter": {
                        "help": "input SAM encoded file path",
                        "metavar": "PATH"
                    }
                },
                "output": {
                    "flag": [
                        "-o",
                        "--output"
                    ],
                    "parameter": {
                        "help": "output SAM encoded file path",
                        "metavar": "PATH"
                    }
                },
                "verbosity": {
                    "flag": [
                        "-v",
                        "--verbosity"
                    ],
                    "parameter": {
                        "choices": [
                            "debug",
                            "info",
                            "warning",
                            "error",
                            "critical"
                        ],
                        "dest": "verbosity",
                        "help": "logging verbosity level",
                        "metavar": "LEVEL"
                    }
                },
                "version": {
                    "flag": [
                        "--version"
                    ],
                    "parameter": {
                        "action": "version",
                        "version": "%[prog]s 1.0"
                    }
                }
            }
        }
    }
}
