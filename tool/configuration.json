{
    "illumina": {
        "interface": {
            "global": {
                "argument": [
                    "version",
                    "verbosity"
                ]
            },
            "instruction": {
                "description": "Lior Galanti lior.galanti@nyu.edu NYU Center for Genomics & Systems Biology"
            },
            "prototype": {
                "illumina run directory": {
                    "flag": [
                        "illumina run directory"
                    ],
                    "parameter": {
                        "help": "illumina run directory",
                        "metavar": "PATH"
                    }
                },
                "selected_lane_number": {
                    "flag": [
                        "--lane-number",
                        "-l"
                    ],
                    "parameter": {
                        "default": 0,
                        "help": "selected lane number",
                        "metavar": "INT",
                        "type": "int"
                    }
                },
                "verbosity": {
                    "flag": [
                        "-v",
                        "--verbosity"
                    ],
                    "parameter": {
                        "choices": [
                            "debug",
                            "info",
                            "warning",
                            "error",
                            "critical"
                        ],
                        "dest": "verbosity",
                        "help": "logging verbosity level",
                        "metavar": "LEVEL"
                    }
                },
                "version": {
                    "flag": [
                        "--version"
                    ],
                    "parameter": {
                        "action": "version",
                        "version": "%[prog]s 1.0"
                    }
                }
            },
            "section": {
                "action": [
                    {
                        "argument": [
                            "illumina run directory"
                        ],
                        "implementation": "bcl2fastq",
                        "instruction": {
                            "help": "bcl2fastq command to write all segments to FASTQ",
                            "name": "bcl2fastq"
                        }
                    },
                    {
                        "argument": [
                            "illumina run directory"
                        ],
                        "instruction": {
                            "help": "Single decoder directive for each lane",
                            "name": "core"
                        }
                    },
                    {
                        "argument": [
                            "illumina run directory"
                        ],
                        "instruction": {
                            "help": "Interleave both template and index segments to SAM",
                            "name": "interleave"
                        }
                    },
                    {
                        "argument": [
                            "illumina run directory",
                            "selected_lane_number"
                        ],
                        "instruction": {
                            "help": "Demultiplex a single lane",
                            "name": "demultiplex"
                        }
                    }
                ],
                "instruction": {
                    "description": "Generate pheniqs configuration files or a bcl2fastq command from an illumina run directory. This tool parses that RunInfo.xml, RunParameters.xml and SampleSheet.csv files in the directory.",
                    "dest": "action",
                    "help": null,
                    "metavar": "ACTION",
                    "title": "pipeline operations"
                }
            }
        },
        "namespace": {
            "sample sheet": {
                "Data": {
                    "column": {
                        "Description": {},
                        "I5_index_ID": {},
                        "I7_Index_ID": {},
                        "Lane": {},
                        "Sample_ID": {},
                        "Sample_Name": {},
                        "Sample_Plate": {},
                        "Sample_Project": {},
                        "Sample_Well": {},
                        "index": {},
                        "index2": {}
                    }
                },
                "Header": {
                    "Date": {}
                },
                "Reads": {},
                "Settings": {}
            }
        },
        "preset": {
            "default": {
                "sample sheet record": {
                    "key": [
                        "@{Sample_ID}",
                        "{flowcell id}:{lane number}:{concatenated barcode}",
                        "{flowcell id}:{concatenated barcode}"
                    ],
                    "value": {
                        "DS": "{Description}",
                        "LB": [
                            "{Sample_Name}",
                            "{Sample_ID}"
                        ],
                        "SM": "{Sample_Project}"
                    }
                }
            }
        }
    },
    "package": {
        "interface": {
            "global": {
                "argument": [
                    "version",
                    "verbosity"
                ]
            },
            "instruction": {
                "description": "Lior Galanti lior.galanti@nyu.edu NYU Center for Genomics & Systems Biology"
            },
            "prototype": {
                "filter": {
                    "flag": [
                        "-f",
                        "--filter"
                    ],
                    "parameter": {
                        "help": "list of packages",
                        "metavar": "PACKAGE",
                        "nargs": "*"
                    }
                },
                "force": {
                    "flag": [
                        "-F",
                        "--force"
                    ],
                    "parameter": {
                        "help": "list of packages to force",
                        "metavar": "PACKAGE",
                        "nargs": "*"
                    }
                },
                "path": {
                    "flag": [
                        "path"
                    ],
                    "parameter": {
                        "help": "path",
                        "metavar": "PATH"
                    }
                },
                "verbosity": {
                    "flag": [
                        "-v",
                        "--verbosity"
                    ],
                    "parameter": {
                        "choices": [
                            "debug",
                            "info",
                            "warning",
                            "error",
                            "critical"
                        ],
                        "dest": "verbosity",
                        "help": "logging verbosity level",
                        "metavar": "LEVEL"
                    }
                },
                "version": {
                    "flag": [
                        "--version"
                    ],
                    "parameter": {
                        "action": "version",
                        "version": "%[prog]s 1.0"
                    }
                }
            },
            "section": {
                "action": [
                    {
                        "argument": [
                            "filter",
                            "path"
                        ],
                        "implementation": "clean",
                        "instruction": {
                            "help": "clean build root environment",
                            "name": "clean"
                        }
                    },
                    {
                        "argument": [
                            "filter",
                            "path"
                        ],
                        "implementation": "build",
                        "instruction": {
                            "help": "build build root environment",
                            "name": "build"
                        }
                    },
                    {
                        "argument": [
                            "filter",
                            "path"
                        ],
                        "implementation": "clean.package",
                        "instruction": {
                            "help": "delete exploded package",
                            "name": "clean.package"
                        }
                    }
                ],
                "instruction": {
                    "description": "",
                    "dest": "action",
                    "help": null,
                    "metavar": "ACTION",
                    "title": "pipeline operations"
                }
            }
        },
        "package implementation": {
            "bcl2fastq": {
                "job implementation": "ppkg.Bcl2Fastq"
            },
            "bz2": {
                "job implementation": "ppkg.BZip2"
            },
            "htslib": {
                "job implementation": "ppkg.Make"
            },
            "libdeflate": {
                "job implementation": "ppkg.LibDeflate"
            },
            "pheniqs": {
                "job implementation": "ppkg.Make"
            },
            "rapidjson": {
                "job implementation": "ppkg.RapidJSON"
            },
            "samtools": {
                "job implementation": "ppkg.SAMTools"
            },
            "xz": {
                "job implementation": "ppkg.Make"
            },
            "zlib": {
                "job implementation": "ppkg.Make"
            }
        }
    },
    "shell": {
        "interface": {
            "global": {
                "argument": [
                    "version",
                    "verbosity"
                ]
            },
            "instruction": {
                "description": "Lior Galanti lior.galanti@nyu.edu NYU Center for Genomics & Systems Biology"
            },
            "prototype": {
                "path": {
                    "flag": [
                        "path"
                    ],
                    "parameter": {
                        "help": "path",
                        "metavar": "PATH"
                    }
                },
                "verbosity": {
                    "flag": [
                        "-v",
                        "--verbosity"
                    ],
                    "parameter": {
                        "choices": [
                            "debug",
                            "info",
                            "warning",
                            "error",
                            "critical"
                        ],
                        "dest": "verbosity",
                        "help": "logging verbosity level",
                        "metavar": "LEVEL"
                    }
                },
                "version": {
                    "flag": [
                        "--version"
                    ],
                    "parameter": {
                        "action": "version",
                        "version": "%[prog]s 1.0"
                    }
                }
            },
            "section": {
                "action": [
                    {
                        "argument": [
                            "path"
                        ],
                        "implementation": "zsh_completion",
                        "instruction": {
                            "help": "generate zsh completion script",
                            "name": "zsh"
                        }
                    }
                ],
                "instruction": {
                    "description": "",
                    "dest": "action",
                    "help": null,
                    "metavar": "ACTION",
                    "title": "pipeline operations"
                }
            }
        }
    },
    "simulate": {
        "interface": {
            "global": {
                "argument": [
                    "path",
                    "report",
                    "number",
                    "error",
                    "input",
                    "output",
                    "model",
                    "capacity",
                    "preset",
                    "version",
                    "verbosity"
                ]
            },
            "instruction": {
                "description": "Lior Galanti lior.galanti@nyu.edu NYU Center for Genomics & Systems Biology"
            },
            "prototype": {
                "path": {
                    "flag": [
                        "path"
                    ],
                    "parameter": {
                        "help": "path",
                        "metavar": "PATH"
                    }
                },
                "capacity": {
                    "flag": [
                        "-c",
                        "--capacity"
                    ],
                    "parameter": {
                        "default": 128,
                        "help": "IO buffer capacity",
                        "metavar": "INT",
                        "type": "int"
                    }
                },
                "report": {
                    "flag": [
                        "-r",
                        "--report"
                    ],
                    "parameter": {
                        "default": "/dev/stderr",
                        "help": "path to write report",
                        "metavar": "PATH"
                    }
                },
                "model": {
                    "flag": [
                        "-m",
                        "--model"
                    ],
                    "parameter": {
                        "default": "lrsim",
                        "help": "name of error model from config",
                        "metavar": "NAME"
                    }
                },
                "number": {
                    "flag": [
                        "-n",
                        "--number"
                    ],
                    "parameter": {
                        "default": 0,
                        "help": "run number to set in simulated read QNAME",
                        "metavar": "INT",
                        "type": "int"
                    }
                },
                "error": {
                    "flag": [
                        "-e",
                        "--error"
                    ],
                    "parameter": {
                        "default": 0.0024,
                        "help": "expected error rate per nucloetide",
                        "metavar": "FLOAT",
                        "type": "float"
                    }
                },
                "preset": {
                    "flag": [
                        "-p",
                        "--preset"
                    ],
                    "parameter": {
                        "default": "default",
                        "help": "model preset",
                        "metavar": "NAME"
                    }
                },
                "input": {
                    "flag": [
                        "-i",
                        "--input"
                    ],
                    "parameter": {
                        "help": "input SAM encoded file path",
                        "metavar": "PATH"
                    }
                },
                "output": {
                    "flag": [
                        "-o",
                        "--output"
                    ],
                    "parameter": {
                        "help": "output SAM encoded file path",
                        "metavar": "PATH"
                    }
                },
                "verbosity": {
                    "flag": [
                        "-v",
                        "--verbosity"
                    ],
                    "parameter": {
                        "choices": [
                            "debug",
                            "info",
                            "warning",
                            "error",
                            "critical"
                        ],
                        "dest": "verbosity",
                        "help": "logging verbosity level",
                        "metavar": "LEVEL"
                    }
                },
                "version": {
                    "flag": [
                        "--version"
                    ],
                    "parameter": {
                        "action": "version",
                        "version": "%[prog]s 1.0"
                    }
                }
            }
        }
    },
    "analyze": {
        "interface": {
            "global": {
                "argument": [
                    "path",
                    "input",
                    "capacity",
                    "version",
                    "verbosity"
                ]
            },
            "instruction": {
                "description": "Lior Galanti lior.galanti@nyu.edu NYU Center for Genomics & Systems Biology"
            },
            "prototype": {
                "path": {
                    "flag": [
                        "path"
                    ],
                    "parameter": {
                        "help": "path",
                        "metavar": "PATH"
                    }
                },
                "capacity": {
                    "flag": [
                        "-c",
                        "--capacity"
                    ],
                    "parameter": {
                        "default": 128,
                        "help": "IO buffer capacity",
                        "metavar": "INT",
                        "type": "int"
                    }
                },
                "input": {
                    "flag": [
                        "-i",
                        "--input"
                    ],
                    "parameter": {
                        "help": "input SAM encoded file path",
                        "metavar": "PATH"
                    }
                },
                "verbosity": {
                    "flag": [
                        "-v",
                        "--verbosity"
                    ],
                    "parameter": {
                        "choices": [
                            "debug",
                            "info",
                            "warning",
                            "error",
                            "critical"
                        ],
                        "dest": "verbosity",
                        "help": "logging verbosity level",
                        "metavar": "LEVEL"
                    }
                },
                "version": {
                    "flag": [
                        "--version"
                    ],
                    "parameter": {
                        "action": "version",
                        "version": "%[prog]s 1.0"
                    }
                }
            }
        }
    },
    "todeml": {
        "interface": {
            "global": {
                "argument": [
                    "version",
                    "verbosity",
                    "input",
                    "output",
                    "capacity"
                ]
            },
            "instruction": {
                "description": "Lior Galanti lior.galanti@nyu.edu NYU Center for Genomics & Systems Biology"
            },
            "prototype": {
                "capacity": {
                    "flag": [
                        "-c",
                        "--capacity"
                    ],
                    "parameter": {
                        "default": 128,
                        "help": "IO buffer capacity",
                        "metavar": "INT",
                        "type": "int"
                    }
                },
                "input": {
                    "flag": [
                        "-i",
                        "--input"
                    ],
                    "parameter": {
                        "help": "input SAM encoded file path",
                        "metavar": "PATH"
                    }
                },
                "output": {
                    "flag": [
                        "-o",
                        "--output"
                    ],
                    "parameter": {
                        "help": "output SAM encoded file path",
                        "metavar": "PATH"
                    }
                },
                "verbosity": {
                    "flag": [
                        "-v",
                        "--verbosity"
                    ],
                    "parameter": {
                        "choices": [
                            "debug",
                            "info",
                            "warning",
                            "error",
                            "critical"
                        ],
                        "dest": "verbosity",
                        "help": "logging verbosity level",
                        "metavar": "LEVEL"
                    }
                },
                "version": {
                    "flag": [
                        "--version"
                    ],
                    "parameter": {
                        "action": "version",
                        "version": "%[prog]s 1.0"
                    }
                }
            }
        }
    },
    "samsample": {
        "interface": {
            "global": {
                "argument": [
                    "fraction",
                    "input",
                    "output",
                    "capacity",
                    "version",
                    "verbosity"
                ]
            },
            "instruction": {
                "description": "Lior Galanti lior.galanti@nyu.edu NYU Center for Genomics & Systems Biology"
            },
            "prototype": {
                "fraction": {
                    "flag": [
                        "-f",
                        "--fraction"
                    ],
                    "parameter": {
                        "default": 0.1,
                        "help": "fraction of reads to sample",
                        "metavar": "FLOAT",
                        "type": "float"
                    }
                },
                "capacity": {
                    "flag": [
                        "-c",
                        "--capacity"
                    ],
                    "parameter": {
                        "default": 128,
                        "help": "IO buffer capacity",
                        "metavar": "INT",
                        "type": "int"
                    }
                },
                "input": {
                    "flag": [
                        "-i",
                        "--input"
                    ],
                    "parameter": {
                        "help": "input SAM encoded file path",
                        "metavar": "PATH"
                    }
                },
                "output": {
                    "flag": [
                        "-o",
                        "--output"
                    ],
                    "parameter": {
                        "help": "output SAM encoded file path",
                        "metavar": "PATH"
                    }
                },
                "verbosity": {
                    "flag": [
                        "-v",
                        "--verbosity"
                    ],
                    "parameter": {
                        "choices": [
                            "debug",
                            "info",
                            "warning",
                            "error",
                            "critical"
                        ],
                        "dest": "verbosity",
                        "help": "logging verbosity level",
                        "metavar": "LEVEL"
                    }
                },
                "version": {
                    "flag": [
                        "--version"
                    ],
                    "parameter": {
                        "action": "version",
                        "version": "%[prog]s 1.0"
                    }
                }
            }
        }
    }
}
