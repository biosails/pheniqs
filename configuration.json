{
    "action": [
        {
            "default": {
                "default output compression": "unknown",
                "default output compression level": "5",
                "default output format": "sam",
                "filter incoming qc fail": false,
                "filter outgoing qc fail": false,
                "input": [
                    "/dev/stdin"
                ],
                "multiplex": {
                    "algorithm": "transparent",
                    "multiplexing classifier": true
                },
                "output": [
                    "/dev/stdout"
                ],
                "report url": "/dev/stderr"
            },
            "description": "Multiplex and Demultiplex annotated DNA sequence reads",
            "epilog": [
                "  -i/--input defaults to /dev/stdin with inputing layout sensing.",
                "  -o/--output default to /dev/stdout with SAM format.",
                "  -I/--base-input and -O/--base-output default to the working directory.",
                "  -V/--validate, -C/--compile and -S/--static disable job excution and only emit information.",
                "  -s/--sense-input will guess input layout by examining the first few reads of each input file.",
                "  -S/--static emits a static configuration file with all imports resolved.",
                "  -C/--compile emits a compiled configuration file ready for execution with implicit attributes resolved.",
                "  -i/--input and -o/--output can be repeated to provide multiple paths,",
                "  i.e. `pheniqs mux -i in_segment_1.fastq -i in_segment_2.fastq -o out_segment_1.fastq -o out_segment_2.fastq`"
            ],
            "implementation": "transcode",
            "name": "mux",
            "option": [
                {
                    "handle": [
                        "-h",
                        "--help"
                    ],
                    "help": "Show this help",
                    "name": "help only",
                    "type": "boolean"
                },
                {
                    "cardinality": "*",
                    "extension": [
                        "fq",
                        "fq.gz",
                        "fastq",
                        "fastq.gz",
                        "bam",
                        "cram",
                        "sam"
                    ],
                    "handle": [
                        "-i",
                        "--input"
                    ],
                    "help": "Path to an input file. May be repeated.",
                    "inode": "file",
                    "meta": "PATH",
                    "name": "input",
                    "type": "url"
                },
                {
                    "cardinality": "*",
                    "extension": [
                        "fq",
                        "fq.gz",
                        "fastq",
                        "fastq.gz",
                        "bam",
                        "cram",
                        "sam"
                    ],
                    "handle": [
                        "-o",
                        "--output"
                    ],
                    "help": "Path to an output file. May be repeated.",
                    "inode": "file",
                    "meta": "PATH",
                    "name": "output",
                    "type": "url"
                },
                {
                    "extension": [
                        "json"
                    ],
                    "handle": [
                        "-c",
                        "--config"
                    ],
                    "help": "Path to configuration file",
                    "inode": "file",
                    "meta": "PATH",
                    "name": "configuration url",
                    "type": "url"
                },
                {
                    "extension": [
                        "json"
                    ],
                    "handle": [
                        "-R",
                        "--report"
                    ],
                    "help": "Path to report file",
                    "inode": "file",
                    "meta": "PATH",
                    "name": "report url",
                    "type": "url"
                },
                {
                    "handle": [
                        "-I",
                        "--base-input"
                    ],
                    "help": "Base input url",
                    "inode": "directory",
                    "name": "base input url",
                    "type": "url"
                },
                {
                    "handle": [
                        "-O",
                        "--base-output"
                    ],
                    "help": "Base output url",
                    "inode": "directory",
                    "name": "base output url",
                    "type": "url"
                },
                {
                    "handle": [
                        "-s",
                        "--sense-input"
                    ],
                    "help": "Sense input segment layout",
                    "name": "sense input layout",
                    "type": "boolean"
                },
                {
                    "handle": [
                        "-n",
                        "--no-output-npf"
                    ],
                    "help": "Filter outgoing QC failed reads",
                    "name": "filter outgoing qc fail",
                    "type": "boolean"
                },
                {
                    "handle": [
                        "-N",
                        "--no-input-npf"
                    ],
                    "help": "Filter incoming QC failed reads.",
                    "name": "filter incoming qc fail",
                    "type": "boolean"
                },
                {
                    "handle": [
                        "-l",
                        "--leading"
                    ],
                    "help": "Leading read segment index",
                    "name": "leading segment index",
                    "type": "integer"
                },
                {
                    "choice": [
                        "fastq",
                        "sam",
                        "bam",
                        "cram"
                    ],
                    "handle": [
                        "-F",
                        "--format"
                    ],
                    "help": "Defult output format",
                    "name": "default output format",
                    "type": "string"
                },
                {
                    "choice": [
                        "none",
                        "gz",
                        "bgzf"
                    ],
                    "handle": [
                        "-Z",
                        "--compression"
                    ],
                    "help": "Defult output compression",
                    "name": "default output compression",
                    "type": "string"
                },
                {
                    "choice": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8",
                        "9"
                    ],
                    "handle": [
                        "-L",
                        "--level"
                    ],
                    "help": "Defult output compression level",
                    "name": "default output compression level",
                    "type": "string"
                },
                {
                    "cardinality": "*",
                    "handle": [
                        "-T",
                        "--token"
                    ],
                    "help": "Output read token",
                    "meta": "SEGMENT:START:END",
                    "name": "template token",
                    "type": "string"
                },
                {
                    "choice": [
                        "CAPILLARY",
                        "LS454",
                        "ILLUMINA",
                        "SOLID",
                        "HELICOS",
                        "IONTORRENT",
                        "ONT",
                        "PACBIO"
                    ],
                    "handle": [
                        "-P",
                        "--platform"
                    ],
                    "help": "Sequencing platform",
                    "name": "platform",
                    "type": "string"
                },
                {
                    "handle": [
                        "-q",
                        "--quality"
                    ],
                    "help": "Enable quality control",
                    "name": "enable quality control",
                    "type": "boolean"
                },
                {
                    "handle": [
                        "-V",
                        "--validate"
                    ],
                    "help": "Validate configuration file and emit a report",
                    "name": "validate only",
                    "type": "boolean"
                },
                {
                    "handle": [
                        "-D",
                        "--distance"
                    ],
                    "help": "Display pairwise barcode distance during validation",
                    "name": "display distance",
                    "type": "boolean"
                },
                {
                    "handle": [
                        "-C",
                        "--compile"
                    ],
                    "help": "Compiled JSON configuration file",
                    "name": "compile only",
                    "type": "boolean"
                },
                {
                    "handle": [
                        "-S",
                        "--static"
                    ],
                    "help": "Static configuration JSON file",
                    "name": "static only",
                    "type": "boolean"
                },
                {
                    "handle": [
                        "-j",
                        "--job"
                    ],
                    "help": "Include a copy of the compiled job in the report",
                    "name": "include compiled job",
                    "type": "boolean"
                },
                {
                    "handle": [
                        "-t",
                        "--threads"
                    ],
                    "help": "Thread pool size",
                    "name": "threads",
                    "type": "integer"
                },
                {
                    "handle": [
                        "--decoding-threads"
                    ],
                    "help": "Number of parallel decoding threads",
                    "name": "decoding threads",
                    "type": "integer"
                },
                {
                    "handle": [
                        "--htslib-threads"
                    ],
                    "help": "Size of htslib thread pool size",
                    "name": "htslib threads",
                    "type": "integer"
                },
                {
                    "handle": [
                        "-B",
                        "--buffer"
                    ],
                    "help": "Feed buffer capacity",
                    "name": "buffer capacity",
                    "type": "integer"
                },
                {
                    "handle": [
                        "--precision"
                    ],
                    "help": "Output floating point precision",
                    "name": "float precision",
                    "type": "integer"
                }
            ]
        }
    ],
    "comment": "pheniqs command line configuration file",
    "default": {
        "buffer capacity": 2048,
        "float precision": 15,
        "input phred offset": 33,
        "leading segment index": 0,
        "output phred offset": 33,
        "platform": "ILLUMINA"
    },
    "description": "",
    "license": [
        "This program comes with ABSOLUTELY NO WARRANTY. This is free software,",
        "and you are welcome to redistribute it under certain conditions."
    ],
    "name": "pheniqs",
    "option": [
        {
            "handle": [
                "-h",
                "--help"
            ],
            "help": "Show this help",
            "name": "help only",
            "type": "boolean"
        },
        {
            "handle": [
                "--version"
            ],
            "help": "Show program version",
            "name": "version only",
            "type": "boolean"
        }
    ],
    "projection": {
        "action": {
            "application name": null,
            "application version": null,
            "base input url": null,
            "base output url": null,
            "default": null,
            "epilog": null,
            "full command": null,
            "implementation": "generic",
            "include compiled job": null,
            "license": null,
            "projection": null,
            "schema": null,
            "working directory": null
        },
        "cellular:barcode": {
            "algorithm": null,
            "concentration": 1,
            "segment cardinality": null
        },
        "cellular:decoder": {
            "algorithm": "pamld",
            "codec": null,
            "confidence threshold": 0.99,
            "distance tolerance": null,
            "noise": 0.01,
            "quality masking threshold": 0,
            "undetermined": null
        },
        "molecular:barcode": {
            "algorithm": null,
            "concentration": 1,
            "segment cardinality": null
        },
        "molecular:decoder": {
            "algorithm": "naive",
            "codec": null,
            "confidence threshold": 0.99,
            "distance tolerance": null,
            "noise": 0.01,
            "quality masking threshold": 0,
            "undetermined": null
        },
        "multiplex:barcode": {
            "enable quality control": null,
            "filter outgoing qc fail": false,
            "output": null
        },
        "multiplex:decoder": {
            "noise": 0.01,
            "base output url": null,
            "enable quality control": null,
            "filter outgoing qc fail": false,
            "output": null
        },
        "sample:barcode": {
            "CN": null,
            "DT": null,
            "LB": null,
            "PG": null,
            "PI": null,
            "PL": null,
            "PM": null,
            "SM": null,
            "algorithm": null,
            "concentration": 1,
            "flowcell id": null,
            "flowcell lane number": null,
            "segment cardinality": null
        },
        "sample:decoder": {
            "CN": null,
            "DT": null,
            "LB": null,
            "PG": null,
            "PI": null,
            "PL": null,
            "PM": null,
            "SM": null,
            "algorithm": "pamld",
            "codec": null,
            "confidence threshold": 0.95,
            "distance tolerance": null,
            "flowcell id": null,
            "flowcell lane number": null,
            "noise": 0.01,
            "quality masking threshold": 0,
            "segment cardinality": 0,
            "undetermined": null
        }
    },
    "prolog": [
        "For more information please visit http://biosails.github.io/pheniqs",
        "Lior Galanti < lior.galanti@nyu.edu > NYU Center for Genomics & Systems Biology 2018."
    ],
    "schema": {
        "instruction:lax": {
            "$ref": "#/definitions/instruction",
            "$schema": "http://json-schema.org/draft-04/schema#",
            "definitions": {
                "barcode_length": {
                    "examples": [
                        [
                            8,
                            8
                        ]
                    ],
                    "items": {
                        "description": "Number of IUPAC encoded nucleotides in the technical sequence.",
                        "examples": [
                            16
                        ],
                        "minimum": 0,
                        "title": "Barcode segment length",
                        "type": "integer"
                    },
                    "minItems": 1,
                    "title": "Barcode length array",
                    "type": "array"
                },
                "barcode_sequence": {
                    "examples": [
                        [
                            "CGAGGCTG",
                            "AGAGGATA"
                        ]
                    ],
                    "items": {
                        "description": "IUPAC encoded DNA sequence. Degenerate nucleotides are not allowed.",
                        "examples": [
                            "CGAGGCTG"
                        ],
                        "format": "regex",
                        "pattern": "^[ATCG=]+$",
                        "title": "Barcode segment sequence",
                        "type": "string"
                    },
                    "minItems": 1,
                    "title": "Barcode sequence array",
                    "type": "array"
                },
                "buffer_capacity": {
                    "description": "Number of buffered records in an input or output feed.",
                    "examples": [
                        2048
                    ],
                    "minimum": 16,
                    "title": "Feed buffer capacity",
                    "type": "integer"
                },
                "buffer_resolution": {
                    "description": "Number of segments of each read interleaved into the feed.",
                    "examples": [
                        4
                    ],
                    "minimum": 1,
                    "title": "Feed buffer resolution",
                    "type": "integer"
                },
                "compile_only": {
                    "description": "Compile instructions and emit as JSON without executing.",
                    "title": "Compile instruction",
                    "type": "boolean"
                },
                "concentration": {
                    "description": "Prior probability that a read will match the barcode.",
                    "minimum": 0,
                    "title": "Barcode concentration",
                    "type": "number"
                },
                "confidence_threshold": {
                    "description": "Non inclusive lower bound on the accepted decoding probability to be considered sucessful.",
                    "examples": [
                        0.95
                    ],
                    "exclusiveMaximum": true,
                    "exclusiveMinimum": true,
                    "maximum": 1,
                    "minimum": 0,
                    "title": "Confidence threshold",
                    "type": "number"
                },
                "decoder": {
                    "properties": {
                        "CN": {
                            "$ref": "#/definitions/rg_cn"
                        },
                        "DS": {
                            "$ref": "#/definitions/rg_ds"
                        },
                        "DT": {
                            "$ref": "#/definitions/rg_dt"
                        },
                        "FO": {
                            "$ref": "#/definitions/rg_fo"
                        },
                        "KS": {
                            "$ref": "#/definitions/rg_ks"
                        },
                        "LB": {
                            "$ref": "#/definitions/rg_lb"
                        },
                        "PG": {
                            "$ref": "#/definitions/rg_pg"
                        },
                        "PI": {
                            "$ref": "#/definitions/rg_pi"
                        },
                        "PL": {
                            "$ref": "#/definitions/rg_pl"
                        },
                        "PM": {
                            "$ref": "#/definitions/rg_pm"
                        },
                        "SM": {
                            "$ref": "#/definitions/rg_sm"
                        },
                        "algorithm": {
                            "$ref": "#/definitions/decoding_algorithm"
                        },
                        "barcode length": {
                            "$ref": "#/definitions/barcode_length"
                        },
                        "base": {
                            "$ref": "#/definitions/decoder_base"
                        },
                        "base output url": {
                            "$ref": "#/definitions/url"
                        },
                        "codec": {
                            "additionalProperties": {
                                "$ref": "#/definitions/decoder_class"
                            },
                            "type": "object"
                        },
                        "confidence threshold": {
                            "$ref": "#/definitions/confidence_threshold"
                        },
                        "distance tolerance": {
                            "$ref": "#/definitions/distance_tolerance"
                        },
                        "flowcell id": {
                            "$ref": "#/definitions/flowcell_id"
                        },
                        "flowcell lane number": {
                            "$ref": "#/definitions/flowcell_lane_number"
                        },
                        "index": {
                            "$ref": "#/definitions/index"
                        },
                        "noise": {
                            "$ref": "#/definitions/noise"
                        },
                        "nucleotide cardinality": {
                            "$ref": "#/definitions/nucleotide_cardinality"
                        },
                        "quality masking threshold": {
                            "$ref": "#/definitions/quality_masking_threshold"
                        },
                        "segment cardinality": {
                            "$ref": "#/definitions/segment_cardinality"
                        },
                        "shannon bound": {
                            "$ref": "#/definitions/shannon_bound"
                        },
                        "transform": {
                            "$ref": "#/definitions/transform"
                        },
                        "undetermined": {
                            "$ref": "#/definitions/undetermined_decoder_class"
                        }
                    },
                    "type": "object"
                },
                "decoder_base": {
                    "description": "Reference to the name of a base decoder to inherit from in the decoder directive",
                    "minLength": 1,
                    "title": "Base",
                    "type": "string"
                },
                "decoder_class": {
                    "properties": {
                        "BC": {
                            "$ref": "#/definitions/rg_bc"
                        },
                        "CN": {
                            "$ref": "#/definitions/rg_cn"
                        },
                        "DS": {
                            "$ref": "#/definitions/rg_ds"
                        },
                        "DT": {
                            "$ref": "#/definitions/rg_dt"
                        },
                        "FO": {
                            "$ref": "#/definitions/rg_fo"
                        },
                        "ID": {
                            "$ref": "#/definitions/rg_id"
                        },
                        "KS": {
                            "$ref": "#/definitions/rg_ks"
                        },
                        "LB": {
                            "$ref": "#/definitions/rg_lb"
                        },
                        "PG": {
                            "$ref": "#/definitions/rg_pg"
                        },
                        "PI": {
                            "$ref": "#/definitions/rg_pi"
                        },
                        "PL": {
                            "$ref": "#/definitions/rg_pl"
                        },
                        "PM": {
                            "$ref": "#/definitions/rg_pm"
                        },
                        "PU": {
                            "$ref": "#/definitions/rg_pu"
                        },
                        "SM": {
                            "$ref": "#/definitions/rg_sm"
                        },
                        "algorithm": {
                            "$ref": "#/definitions/decoding_algorithm"
                        },
                        "barcode": {
                            "$ref": "#/definitions/barcode_sequence"
                        },
                        "concentration": {
                            "$ref": "#/definitions/concentration"
                        },
                        "enable quality control": {
                            "$ref": "#/definitions/enable_quality_control"
                        },
                        "filter outgoing qc fail": {
                            "$ref": "#/definitions/filter_outgoing_qc_fail"
                        },
                        "flowcell id": {
                            "$ref": "#/definitions/flowcell_id"
                        },
                        "flowcell lane number": {
                            "$ref": "#/definitions/flowcell_lane_number"
                        },
                        "index": {
                            "$ref": "#/definitions/index"
                        },
                        "output": {
                            "$ref": "#/definitions/url_array"
                        },
                        "output feed by segment": {
                            "$ref": "#/definitions/feed_array"
                        },
                        "segment cardinality": {
                            "$ref": "#/definitions/segment_cardinality"
                        }
                    },
                    "type": "object"
                },
                "decoding_algorithm": {
                    "description": "The decoding algorithm used by the decoder. MDD is the miniumum distance decoder, PAMLD is the Phred-Adjusted Maximum Likelihood decoder. The Naive decoder will populate SAM auxiliary tags without attempting error correction and the transparent simply route all read to the default output.",
                    "enum": [
                        "mdd",
                        "pamld",
                        "naive",
                        "transparent"
                    ],
                    "title": "Decoding algorithm",
                    "type": "string"
                },
                "decoding_topic": {
                    "items": {
                        "$ref": "#/definitions/decoder"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "distance_tolerance": {
                    "description": "The maximum Hammig distance a minimum distance decoder will tolerate on each barcode segment",
                    "examples": [
                        [
                            2,
                            1
                        ]
                    ],
                    "items": {
                        "description": "The maximum Hammig distance a minimum distance decoder will tolerate on the barcode segment",
                        "examples": [
                            1
                        ],
                        "minimum": 0,
                        "title": "Segment distance tolerance",
                        "type": "integer"
                    },
                    "minItems": 1,
                    "title": "Distance tolerance array",
                    "type": "array"
                },
                "enable_quality_control": {
                    "description": "Do not update Quality Control accumulators for a minor speed gain.",
                    "title": "Disable quality control",
                    "type": "boolean"
                },
                "feed": {
                    "properties": {
                        "capacity": {
                            "$ref": "#/definitions/buffer_capacity"
                        },
                        "direction": {
                            "$ref": "#/definitions/io_direction"
                        },
                        "index": {
                            "$ref": "#/definitions/index"
                        },
                        "phred offset": {
                            "$ref": "#/definitions/phred_offset"
                        },
                        "platform": {
                            "$ref": "#/definitions/rg_pl"
                        },
                        "resolution": {
                            "$ref": "#/definitions/buffer_resolution"
                        },
                        "url": {
                            "$ref": "#/definitions/url"
                        }
                    },
                    "type": "object"
                },
                "feed_array": {
                    "items": {
                        "$ref": "#/definitions/feed"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "filter_incoming_qc_fail": {
                    "description": "Filter incoming QC failed reads.",
                    "title": "Filter incoming QC failed reads",
                    "type": "boolean"
                },
                "filter_outgoing_qc_fail": {
                    "description": "Filter outgoing QC failed reads.",
                    "title": "Filter outgoing QC failed reads",
                    "type": "boolean"
                },
                "flowcell_id": {
                    "description": "A unique identifier of the flowcel used to deduce read group identifiers.",
                    "examples": [
                        "H7LT2DSXX"
                    ],
                    "minLength": 1,
                    "title": "Flowcell ID",
                    "type": "string"
                },
                "flowcell_lane_number": {
                    "description": "The flowcel lane number used to deduce read group identifiers.",
                    "examples": [
                        3
                    ],
                    "minimum": 0,
                    "title": "Flowcell lane number",
                    "type": "integer"
                },
                "hd": {
                    "GO": {
                        "$ref": "#/definitions/hd_go"
                    },
                    "SO": {
                        "$ref": "#/definitions/hd_so"
                    },
                    "VN": {
                        "$ref": "#/definitions/hd_vn"
                    }
                },
                "hd_go": {
                    "description": "Grouping of alignments, indicating that similar alignment records are grouped together but the file is not necessarily sorted overall.",
                    "enum": [
                        "none",
                        "query",
                        "reference"
                    ],
                    "title": "Grouping order",
                    "type": "string"
                },
                "hd_so": {
                    "description": "Sorting order of alignments. For coordinate sort, the major sort key is the RNAME field, with order defined by the order of @SQ lines in the header. The minor sort key is the POS field. For alignments with equal RNAME and POS, order is arbitrary. All alignments with * in RNAME field follow alignments with some other value but otherwise are in arbitrary order.",
                    "enum": [
                        "unknown",
                        "unsorted",
                        "queryname",
                        "coordinate"
                    ],
                    "title": "Sorting order",
                    "type": "string"
                },
                "hd_vn": {
                    "description": "HTS format version",
                    "format": "regex",
                    "pattern": "^[0-9]+\\.[0-9]+$",
                    "title": "Format version",
                    "type": "string"
                },
                "index": {
                    "minimum": 0,
                    "type": "integer"
                },
                "instruction": {
                    "properties": {
                        "CN": {
                            "$ref": "#/definitions/rg_cn"
                        },
                        "DS": {
                            "$ref": "#/definitions/rg_ds"
                        },
                        "DT": {
                            "$ref": "#/definitions/rg_dt"
                        },
                        "FO": {
                            "$ref": "#/definitions/rg_fo"
                        },
                        "KS": {
                            "$ref": "#/definitions/rg_ks"
                        },
                        "LB": {
                            "$ref": "#/definitions/rg_lb"
                        },
                        "PG": {
                            "$ref": "#/definitions/rg_pg"
                        },
                        "PI": {
                            "$ref": "#/definitions/rg_pi"
                        },
                        "PL": {
                            "$ref": "#/definitions/rg_pl"
                        },
                        "PM": {
                            "$ref": "#/definitions/rg_pm"
                        },
                        "SM": {
                            "$ref": "#/definitions/rg_sm"
                        },
                        "base input url": {
                            "$ref": "#/definitions/url"
                        },
                        "base output url": {
                            "$ref": "#/definitions/url"
                        },
                        "buffer capacity": {
                            "$ref": "#/definitions/buffer_capacity"
                        },
                        "cellular": {
                            "items": {
                                "$ref": "#/definitions/decoder"
                            },
                            "minItems": 1,
                            "title": "Cellular barcode decoder array",
                            "type": "array"
                        },
                        "compile only": {
                            "$ref": "#/definitions/compile_only"
                        },
                        "decoder": {
                            "additionalProperties": {
                                "$ref": "#/definitions/decoder"
                            },
                            "title": "Barcode decoder repository",
                            "type": "object"
                        },
                        "default output compression": {
                            "$ref": "#/definitions/output_format_compression"
                        },
                        "default output compression level": {
                            "$ref": "#/definitions/output_format_compression_level"
                        },
                        "default output format": {
                            "$ref": "#/definitions/output_format_type"
                        },
                        "enable quality control": {
                            "$ref": "#/definitions/enable_quality_control"
                        },
                        "filter incoming qc fail": {
                            "$ref": "#/definitions/filter_incoming_qc_fail"
                        },
                        "filter outgoing qc fail": {
                            "$ref": "#/definitions/filter_outgoing_qc_fail"
                        },
                        "flowcell id": {
                            "$ref": "#/definitions/flowcell_id"
                        },
                        "flowcell lane number": {
                            "$ref": "#/definitions/flowcell_lane_number"
                        },
                        "import": {
                            "description": "Array or URL paths to import. Relative paths are resolved relative to the importing file.",
                            "items": {
                                "$ref": "#/definitions/url"
                            },
                            "minItems": 1,
                            "title": "Import",
                            "type": "array"
                        },
                        "input": {
                            "$ref": "#/definitions/url_array"
                        },
                        "input feed": {
                            "$ref": "#/definitions/feed_array"
                        },
                        "input feed by segment": {
                            "$ref": "#/definitions/feed_array"
                        },
                        "input phred offset": {
                            "$ref": "#/definitions/phred_offset"
                        },
                        "input segment cardinality": {
                            "$ref": "#/definitions/segment_cardinality"
                        },
                        "leading segment index": {
                            "$ref": "#/definitions/leading_segment_index"
                        },
                        "molecular": {
                            "items": {
                                "$ref": "#/definitions/decoder"
                            },
                            "minItems": 1,
                            "title": "Molecular barcode decoder array",
                            "type": "array"
                        },
                        "multiplex": {
                            "$ref": "#/definitions/decoder",
                            "title": "Multiplex barcode decoder"
                        },
                        "output": {
                            "$ref": "#/definitions/url_array"
                        },
                        "output feed": {
                            "$ref": "#/definitions/feed_array"
                        },
                        "output phred offset": {
                            "$ref": "#/definitions/phred_offset"
                        },
                        "output segment cardinality": {
                            "$ref": "#/definitions/segment_cardinality"
                        },
                        "program": {
                            "$ref": "#/definitions/pg"
                        },
                        "sample": {
                            "items": {
                                "$ref": "#/definitions/decoder"
                            },
                            "minItems": 1,
                            "title": "Sample barcode decoder array",
                            "type": "array"
                        },
                        "threads": {
                            "$ref": "#/definitions/threads"
                        },
                        "transform": {
                            "$ref": "#/definitions/transform"
                        },
                        "working directory": {
                            "$ref": "#/definitions/url"
                        }
                    },
                    "type": "object"
                },
                "io_direction": {
                    "enum": [
                        "in",
                        "out"
                    ],
                    "type": "string"
                },
                "knit": {
                    "Description": "Pattern made of token references to assemble a segment",
                    "format": "regex",
                    "pattern": "^(~)?[0-9]+(:(~)?[0-9]+)*$",
                    "title": "Segment pattern",
                    "type": "string"
                },
                "leading_segment_index": {
                    "description": "The index of the default segment to query for metadata for tagging output reads.",
                    "minimum": 0,
                    "title": "Leading segment index",
                    "type": "integer"
                },
                "noise": {
                    "description": "The prior on the expected probability that a read did not originate from any of the classes defined in the decoder. This is a probability value used by PAMLD decoders when computing the Baysian decoding probability.",
                    "examples": [
                        0.05
                    ],
                    "exclusiveMaximum": true,
                    "maximum": 1,
                    "minimum": 0,
                    "title": "Noise",
                    "type": "number"
                },
                "nucleotide_cardinality": {
                    "minimum": 0,
                    "type": "integer"
                },
                "output_format_compression": {
                    "enum": [
                        "none",
                        "gz",
                        "bgzf"
                    ],
                    "type": "string"
                },
                "output_format_compression_level": {
                    "enum": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8",
                        "9"
                    ],
                    "type": "string"
                },
                "output_format_type": {
                    "enum": [
                        "fastq",
                        "sam",
                        "bam",
                        "cram"
                    ],
                    "type": "string"
                },
                "pg": {
                    "CL": {
                        "$ref": "#/definitions/pg_cl"
                    },
                    "ID": {
                        "$ref": "#/definitions/pg_id"
                    },
                    "PN": {
                        "$ref": "#/definitions/pg_pn"
                    },
                    "VN": {
                        "$ref": "#/definitions/pg_vn"
                    }
                },
                "pg_cl": {
                    "minLength": 1,
                    "type": "string"
                },
                "pg_id": {
                    "minLength": 1,
                    "type": "string"
                },
                "pg_pn": {
                    "minLength": 1,
                    "type": "string"
                },
                "pg_vn": {
                    "minLength": 1,
                    "type": "string"
                },
                "phred_offset": {
                    "Description": "The offset to add or remove to the ordinal of the Phred encoded quality score",
                    "maximum": 128,
                    "minimum": 0,
                    "title": "Phred offset",
                    "type": "integer"
                },
                "quality_masking_threshold": {
                    "Description": "Lower bound on a nucloetide quality score to be considered for barcode evaluation.",
                    "maximum": 128,
                    "minimum": 0,
                    "title": "Quality masking threshold",
                    "type": "integer"
                },
                "rg": {
                    "properties": {
                        "BC": {
                            "$ref": "#/definitions/rg_bc"
                        },
                        "CN": {
                            "$ref": "#/definitions/rg_cn"
                        },
                        "DS": {
                            "$ref": "#/definitions/rg_ds"
                        },
                        "DT": {
                            "$ref": "#/definitions/rg_dt"
                        },
                        "FO": {
                            "$ref": "#/definitions/rg_fo"
                        },
                        "ID": {
                            "$ref": "#/definitions/rg_id"
                        },
                        "KS": {
                            "$ref": "#/definitions/rg_ks"
                        },
                        "LB": {
                            "$ref": "#/definitions/rg_lb"
                        },
                        "PG": {
                            "$ref": "#/definitions/rg_pg"
                        },
                        "PI": {
                            "$ref": "#/definitions/rg_pi"
                        },
                        "PL": {
                            "$ref": "#/definitions/rg_pl"
                        },
                        "PM": {
                            "$ref": "#/definitions/rg_pm"
                        },
                        "PU": {
                            "$ref": "#/definitions/rg_pu"
                        },
                        "SM": {
                            "$ref": "#/definitions/rg_sm"
                        }
                    }
                },
                "rg_bc": {
                    "description": "Barcode sequence identifying the sample or library. This value is the expected barcode bases as read by the sequencing machine in the absence of errors. If there are several barcodes, the recommended implementation concatenates all the barcodes separating them with hyphens.",
                    "format": "regex",
                    "pattern": "^[ATCG=-]+$",
                    "title": "Read group barcode sequence",
                    "type": "string"
                },
                "rg_cn": {
                    "description": "Name of sequencing center producing the read.",
                    "minLength": 1,
                    "title": "Read group sequencing center",
                    "type": "string"
                },
                "rg_ds": {
                    "description": "Description. UTF-8 encoding may be used.",
                    "minLength": 1,
                    "title": "Read group description",
                    "type": "string"
                },
                "rg_dt": {
                    "description": "Date the run was produced (ISO8601 date or date/time).",
                    "format": "date-time",
                    "minLength": 1,
                    "title": "Read group run date",
                    "type": "string"
                },
                "rg_fo": {
                    "description": "The array of nucleotide bases that correspond to the nucleotides used for each flow of each read. Multi-base flows are encoded in IUPAC format, and non-nucleotide flows by various other characters.",
                    "fortmat": "regex",
                    "pattern": "\\*|[ACMGRSVTWYHKDBN]+",
                    "title": "Read group flow order",
                    "type": "string"
                },
                "rg_id": {
                    "description": "Each @RG line must have a unique ID. The value of ID is used in the RG tags of alignment records. Must be unique among all read groups in header section. Read group IDs may be modified when merging SAM files in order to handle collisions.",
                    "minLength": 1,
                    "title": "Read group identifier",
                    "type": "string"
                },
                "rg_ks": {
                    "description": "The array of nucleotide bases that correspond to the key sequence of each read.",
                    "minLength": 1,
                    "title": "Read group key sequence",
                    "type": "string"
                },
                "rg_lb": {
                    "minLength": 1,
                    "title": "Read group library",
                    "type": "string"
                },
                "rg_pg": {
                    "description": "Programs used for processing the read group.",
                    "minLength": 1,
                    "title": "Read group program",
                    "type": "string"
                },
                "rg_pi": {
                    "description": "Predicted median insert size.",
                    "minLength": 1,
                    "title": "Read group predicted insert size",
                    "type": "string"
                },
                "rg_pl": {
                    "description": "Platform or technology used to produce the reads.",
                    "enum": [
                        "UNKNOWN",
                        "CAPILLARY",
                        "LS454",
                        "ILLUMINA",
                        "SOLID",
                        "HELICOS",
                        "IONTORRENT",
                        "ONT",
                        "PACBIO"
                    ],
                    "title": "Read group platform",
                    "type": "string"
                },
                "rg_pm": {
                    "description": "Free-form text providing further details of the platform/technology used.",
                    "minLength": 1,
                    "title": "Platform model",
                    "type": "string"
                },
                "rg_pu": {
                    "description": "Platform unit Unique identifier.",
                    "minLength": 1,
                    "title": "Platform unit",
                    "type": "string"
                },
                "rg_sm": {
                    "description": "Use pool name where a pool is being sequenced.",
                    "minLength": 1,
                    "title": "Read group sample",
                    "type": "string"
                },
                "segment_cardinality": {
                    "Description": "Total number of segments in the read.",
                    "minimum": 0,
                    "title": "Segment cardinality",
                    "type": "integer"
                },
                "segment_token": {
                    "Description": "Token to extract from a segment",
                    "examples": [
                        "0:0:3",
                        "0:0:",
                        "0:-4:",
                        "1:-5:-1",
                        "1:3:-2"
                    ],
                    "format": "regex",
                    "pattern": "^[0-9]+:(-?[0-9]+)?:(-?[0-9]+)?$",
                    "title": "Segment token",
                    "type": "string"
                },
                "shannon_bound": {
                    "description": "The Shannon bound is a lower bound on the Hammig distance a minimum distance decoder can tolerate on each barcode segment",
                    "items": {
                        "description": "A lower bound on the Hammig distance a minimum distance decoder can tolerate on the barcode segment",
                        "minimum": 0,
                        "title": "Segment shannon bound",
                        "type": "integer"
                    },
                    "minItems": 1,
                    "title": "Shannon bound array",
                    "type": "array"
                },
                "template": {
                    "Tile": "Template",
                    "properties": {
                        "transform": {
                            "$ref": "#/definitions/transform"
                        }
                    },
                    "type": "object"
                },
                "threads": {
                    "description": "Number of parallel processing threads used by the pipeline.",
                    "minimum": 1,
                    "title": "Threads",
                    "type": "integer"
                },
                "transform": {
                    "Tile": "Transform",
                    "properties": {
                        "knit": {
                            "items": {
                                "$ref": "#/definitions/knit"
                            },
                            "minItems": 1,
                            "type": "array"
                        },
                        "token": {
                            "items": {
                                "$ref": "#/definitions/segment_token"
                            },
                            "minItems": 1,
                            "type": "array"
                        }
                    },
                    "required": [
                        "token"
                    ],
                    "type": "object"
                },
                "undetermined_decoder_class": {
                    "properties": {
                        "BC": {
                            "$ref": "#/definitions/rg_bc"
                        },
                        "CN": {
                            "$ref": "#/definitions/rg_cn"
                        },
                        "DS": {
                            "$ref": "#/definitions/rg_ds"
                        },
                        "DT": {
                            "$ref": "#/definitions/rg_dt"
                        },
                        "FO": {
                            "$ref": "#/definitions/rg_fo"
                        },
                        "ID": {
                            "$ref": "#/definitions/rg_id"
                        },
                        "KS": {
                            "$ref": "#/definitions/rg_ks"
                        },
                        "LB": {
                            "$ref": "#/definitions/rg_lb"
                        },
                        "PG": {
                            "$ref": "#/definitions/rg_pg"
                        },
                        "PI": {
                            "$ref": "#/definitions/rg_pi"
                        },
                        "PL": {
                            "$ref": "#/definitions/rg_pl"
                        },
                        "PM": {
                            "$ref": "#/definitions/rg_pm"
                        },
                        "PU": {
                            "$ref": "#/definitions/rg_pu"
                        },
                        "SM": {
                            "$ref": "#/definitions/rg_sm"
                        },
                        "algorithm": {
                            "$ref": "#/definitions/decoding_algorithm"
                        },
                        "enable quality control": {
                            "$ref": "#/definitions/enable_quality_control"
                        },
                        "filter outgoing qc fail": {
                            "$ref": "#/definitions/filter_outgoing_qc_fail"
                        },
                        "flowcell id": {
                            "$ref": "#/definitions/flowcell_id"
                        },
                        "flowcell lane number": {
                            "$ref": "#/definitions/flowcell_lane_number"
                        },
                        "index": {
                            "$ref": "#/definitions/index"
                        },
                        "output": {
                            "$ref": "#/definitions/url_array"
                        },
                        "output feed by segment": {
                            "$ref": "#/definitions/feed_array"
                        },
                        "segment cardinality": {
                            "$ref": "#/definitions/segment_cardinality"
                        }
                    },
                    "type": "object"
                },
                "url": {
                    "description": "File path as a string with optional query string.",
                    "minLength": 1,
                    "title": "URL",
                    "type": "string"
                },
                "url_array": {
                    "items": {
                        "$ref": "#/definitions/url"
                    },
                    "minItems": 1,
                    "type": "array"
                }
            }
        }
    }
}
